package cobra.borne;

import controleAcces.annuairePackage.loginIncorrectException;
import controleAcces.annuairePackage.mdpIdentiqueException;
import controleAcces.annuairePackage.personneInexistanteException;
import controleAcces.sessionExpireeException;
import controleAcces.sessionInvalidException;
import java.awt.Color;
import java.awt.HeadlessException;
import java.util.logging.Level;
import java.util.logging.Logger;
import cobra.Empreinte;
import controleAcces.coffreFortPackage.matriculeInconnuException;

public class BorneFrame extends javax.swing.JFrame {

  private Borne borne;

  private enum ETAT {

	NONCONNECTE, CHANGEMDP, AJOUTEMPREINTE, MODIFEMPREINTE
  };
  private ETAT etat;

  private enum ETATM {

	ERROR, INFOR
  };
  private ETATM etatMessage;

  private String message;

  private boolean aMessage;

  public BorneFrame(Borne borne) throws HeadlessException {
	this.borne = borne;
	initComponents();
	this.setSize(500, 300);
	etat = ETAT.NONCONNECTE;
	activateNonConnecte();
	aMessage = false;
  }

  private void setMessage(ETATM em, String m) {
	etatMessage = em;
	message = m;
	aMessage = true;
  }

  private void updateMessage() {
	if (aMessage) {
	  infoLabel.setText(message);
	  if (etatMessage == ETATM.ERROR) {
		infoLabel.setForeground(Color.red);
	  }
	  if (etatMessage == ETATM.INFOR) {
		infoLabel.setForeground(Color.blue);
	  }
	} else {
	  infoLabel.setText("");
	}
	aMessage = false;
  }

  private void activateNonConnecte() {
	titreLabel.setText("LOGIN");
	okButton.setText("Connexion");
	okButton.setEnabled(true);
	cancelButton.setText("Fermer");
	cancelButton.setEnabled(true);
	updateMessage();

	loginPanel.initState();
	loginPanel.setVisible(true);
	mdpPanel.setVisible(false);
	empreintePanel.setVisible(false);
  }

  private void activateChangeMdp() {
	titreLabel.setText("Changement mot de passe");
	okButton.setText("Changer");
	okButton.setEnabled(true);
	cancelButton.setText("Annuler");
	cancelButton.setEnabled(true);
	updateMessage();

	mdpPanel.initState();
	loginPanel.setVisible(false);
	mdpPanel.setVisible(true);
	empreintePanel.setVisible(false);
  }

  private void activateModifEmpreinte() {
	titreLabel.setText("Empreinte");
	okButton.setText("Modifier");
	okButton.setEnabled(true);
	cancelButton.setText("Annuler");
	cancelButton.setEnabled(true);
	updateMessage();

	empreintePanel.initState();
	loginPanel.setVisible(false);
	mdpPanel.setVisible(false);
	empreintePanel.setVisible(true);
  }

  private void activateAjoutEmpreinte() {
	titreLabel.setText("Empreinte");
	okButton.setText("Ajouter");
	okButton.setEnabled(true);
	cancelButton.setText("Annuler");
	cancelButton.setEnabled(true);
	updateMessage();

	empreintePanel.initState();
	loginPanel.setVisible(false);
	mdpPanel.setVisible(false);
	empreintePanel.setVisible(true);
  }

  private void sessionExpiree() {
	setMessage(ETATM.ERROR, "Session expirée");
	etat = ETAT.NONCONNECTE;
	activateNonConnecte();
  }

  private void sessionInvalide() {
	setMessage(ETATM.ERROR, "Session invalide");
	etat = ETAT.NONCONNECTE;
	activateNonConnecte();
  }

  /**
   * Creates new form BorneFrame
   */
  public BorneFrame() {
	initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    titreLabel = new javax.swing.JLabel();
    infoLabel = new javax.swing.JLabel();
    loginPanel = new cobra.borne.LoginPanel();
    mdpPanel = new cobra.borne.MdpPanel();
    empreintePanel = new cobra.borne.EmpreintePanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    okButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    okButton.setText("jButton1");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });

    cancelButton.setText("jButton2");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });

    titreLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    titreLabel.setText("jLabel1");
    titreLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

    infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    infoLabel.setText("jLabel1");
    infoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
              .addContainerGap()
              .addComponent(cancelButton)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addComponent(okButton))
            .addGroup(layout.createSequentialGroup()
              .addGap(43, 43, 43)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(loginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(empreintePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mdpPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(titreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(56, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(titreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(loginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(mdpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(empreintePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(33, 33, 33)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
	switch (etat) {
	  case NONCONNECTE:
		try {
		  borne.authentifier(loginPanel.getMatricule(), loginPanel.getMdp());
		  if (borne.premiereConnexion()) {
			// Mot de passe à changer
			etat = ETAT.CHANGEMDP;
			setMessage(ETATM.INFOR, "Veuillez changer votre mot de passe.");
			activateChangeMdp();
		  } else {
			try {
			  // Vérifie si empreinte existe déjà
			  borne.aEmpreinte();
			  // Oui
			  etat = ETAT.MODIFEMPREINTE;
			  activateModifEmpreinte();
			} catch (matriculeInconnuException ex) {
			  // Non
			  etat = ETAT.AJOUTEMPREINTE;
			  activateAjoutEmpreinte();
			} catch (sessionInvalidException ex) {
			  sessionInvalide();
			} catch (sessionExpireeException ex) {
			  sessionExpiree();
			}
		  }
		} catch (loginIncorrectException ex) {
		  etat = ETAT.NONCONNECTE;
		  setMessage(ETATM.ERROR, ex.message);
		  activateNonConnecte();
		} catch (personneInexistanteException ex) {
		  etat = ETAT.NONCONNECTE;
		  setMessage(ETATM.ERROR, ex.message);
		  activateNonConnecte();
		}
		break;

	  case CHANGEMDP:
		String mdp1 = mdpPanel.getMdp1();
		String mdp2 = mdpPanel.getMdp2();

		if (mdp1.equals(mdp2)) {
		  try {
			borne.changeMdp(mdp1);
			setMessage(ETATM.INFOR, "Mot de passe changé");
			// Etat suivant en fonction de l'existence de l'empreinte
			try {
			  // Vérifie si empreinte existe déjà
			  borne.aEmpreinte();
			  // Oui
			  etat = ETAT.MODIFEMPREINTE;
			  activateModifEmpreinte();
			} catch (matriculeInconnuException ex) {
			  // Non
			  etat = ETAT.AJOUTEMPREINTE;
			  activateAjoutEmpreinte();
			} catch (sessionInvalidException ex) {
			  sessionInvalide();
			} catch (sessionExpireeException ex) {
			  sessionExpiree();
			}
		  } catch (mdpIdentiqueException ex) {
			setMessage(ETATM.ERROR, ex.message);
		  } catch (sessionInvalidException ex) {
			sessionInvalide();
		  } catch (sessionExpireeException ex) {
			sessionExpiree();
		  } catch (personneInexistanteException ex) {
			setMessage(ETATM.ERROR, "Erreur changement.");
		  }

		} else {
		  setMessage(ETATM.ERROR, "Attention");
		  etat = ETAT.CHANGEMDP;
		  activateChangeMdp();
		}
		break;

	  case AJOUTEMPREINTE:
		// Empreinte vide
		if (empreintePanel.getEmpreinte().isEmpty()) {
		  setMessage(ETATM.ERROR, "Posez votre doigt");
		  etat = ETAT.AJOUTEMPREINTE;
		  activateAjoutEmpreinte();
		} else {
		  // Empreinte OK
		  try {
			Empreinte empreinte = new Empreinte(empreintePanel.getEmpreinte());
			borne.ajoutempreinte(empreinte);
			setMessage(ETATM.INFOR, "Empreinte enregistrée");
			etat = ETAT.NONCONNECTE;
			activateNonConnecte();
		  } catch (sessionInvalidException ex) {
			sessionInvalide();
		  } catch (sessionExpireeException ex) {
			sessionExpiree();
		  }
		}
		break;

	  case MODIFEMPREINTE:
		// Empreinte vide
		if (empreintePanel.getEmpreinte().isEmpty()) {
		  setMessage(ETATM.ERROR, "Posez votre doigt");
		  etat = ETAT.MODIFEMPREINTE;
		  activateModifEmpreinte();
		} else {
		  // Empreinte OK
		  try {
			Empreinte empreinte = new Empreinte(empreintePanel.getEmpreinte());
			borne.modifEmpreinte(empreinte);
			setMessage(ETATM.INFOR, "Empreinte changée");
			etat = ETAT.NONCONNECTE;
			activateNonConnecte();
		  } catch (sessionInvalidException ex) {
			sessionInvalide();
		  } catch (sessionExpireeException ex) {
			sessionExpiree();
		  } catch (matriculeInconnuException ex) {
			Logger.getLogger(BorneFrame.class.getName()).log(Level.SEVERE, null, ex);
		  }
		}
		break;
	  default:
		throw new RuntimeException("Transition d'état impossible");
	}
  }//GEN-LAST:event_okButtonActionPerformed

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
	switch (etat) {
	  case NONCONNECTE:
		this.dispose();
		break;
	  case CHANGEMDP:
		setMessage(ETATM.INFOR, "Opération annulée");
		activateNonConnecte();
		break;
	  case AJOUTEMPREINTE:
		etat = ETAT.NONCONNECTE;
		setMessage(ETATM.INFOR, "Opération annulée");
		activateNonConnecte();
		break;
	  case MODIFEMPREINTE:
		etat = ETAT.NONCONNECTE;
		setMessage(ETATM.INFOR, "Opération annulée");
		activateNonConnecte();
		break;
	  default:
		throw new RuntimeException("Transition d'état impossible");
	}
  }//GEN-LAST:event_cancelButtonActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	 */
	try {
	  for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Nimbus".equals(info.getName())) {
		  javax.swing.UIManager.setLookAndFeel(info.getClassName());
		  break;
		}
	  }
	} catch (ClassNotFoundException ex) {
	  java.util.logging.Logger.getLogger(BorneFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	  java.util.logging.Logger.getLogger(BorneFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	  java.util.logging.Logger.getLogger(BorneFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	  java.util.logging.Logger.getLogger(BorneFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	  public void run() {
		new BorneFrame().setVisible(true);
	  }
	});
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton;
  private cobra.borne.EmpreintePanel empreintePanel;
  private javax.swing.JLabel infoLabel;
  private cobra.borne.LoginPanel loginPanel;
  private cobra.borne.MdpPanel mdpPanel;
  private javax.swing.JButton okButton;
  private javax.swing.JLabel titreLabel;
  // End of variables declaration//GEN-END:variables
}
