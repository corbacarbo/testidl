module controleAcces{

typedef long Heure;
typedef long Minute;
typedef long Jour;
typedef long Mois;
typedef long Annee;

typedef string Matricule;

typedef long long Empreinte;

typedef long long Cle;

typedef struct personneIdl{
  Matricule matricule;
  string nom;
  string prenom;
  string photo;
  string mdp;
  boolean mdpChange;
  string responsabilite;
} personneStruct;

/********** Exceptions *****/

  exception sessionInvalidException{
    string message;
  };

  exception sessionExpireeException{
	string message;
  };


/******************** TROUSSEAU ********************/
interface trousseau{

  /********** Types *****/

  /********** Méthodes *****/

  Cle startSession(in string c);

  void valideSession(in Cle cleIdl)
    raises (sessionInvalidException, sessionExpireeException);

};

/******************** ANNUAIRE ********************/
interface annuaire{

  /********** Types *****/
	
  typedef sequence<personneStruct> listePersonne;

  /********** Exceptions *****/

  exception loginIncorrectException{
    string message;
  };

  exception mdpIdentiqueException{
    string message;
  };

  exception personneInexistanteException{
    string message;
  };

  /********** Méthodes *****/

  /*
   * Vérifie des données d'identification.
   * Retourne une clé permettant d’accéder aux services nécessitant une authentification.
   */
  Cle authentification(in Matricule matriculeIdl, in string mdp)
	  raises (loginIncorrectException);

  /*
   * Modification de mot de passe pour les employés permanents uniquement.
   * La clé provient d'un appel à authentification().
   */
  void modificationMdp(in Cle cleIdl, in Matricule matriculeIdl, in string nouveauMdp)
	  raises (mdpIdentiqueException, sessionInvalidException, sessionExpireeException, personneInexistanteException);

  /*
   * Recherche d'un employé par matricule et/ou nom et/ou prenom.
   * Peut retourner plusieurs personnes.
   */
  listePersonne rechercherPersonne(in Matricule matriculeIdl, in string nom, in string prenom)
	  raises (personneInexistanteException);

  /*
   * Permet de chercher un employé à partir de son matricule.
   *
   */
  personneStruct validerIdentite(in Matricule matriculeIdl)
	  raises(personneInexistanteException);

  /*
   * Ajouter un nouvel employé permanent : fournir nom, prenom, photo
   *   -> dans une structure Personne incomplète.
   * Calcul automatique et renvoi du matricule (incrémental) et du mot de passe
   *   -> dans une structure Personne complète.
   */
  personneStruct ajouterPermanent(in Cle cleIdl, in personneStruct p)
        raises (sessionInvalidException, sessionExpireeException);

  /*
   * Ajouter un nouvel employé temporaire : fournir nom, prenom, photo
   *   -> dans une structure Personne incomplète.
   * Calcul automatique et renvoi du matricule (incrémental)
   *   -> dans une structure Personne presque complète (pas de mot de passe)
   */
  personneStruct ajouterTemporaire(in Cle cleIdl, in personneStruct p)
        raises (sessionInvalidException, sessionExpireeException);

};

/******************** AUTORISATEUR ********************/

interface autorisateur{

  /********** Types *****/

  typedef struct autorisationIdl{
	  Matricule matricule;
	  Heure heureD;
	  Minute minuteD;
	  Heure heureF;
	  Minute minuteF;
  } autorisationStruct;

  typedef struct autorisationRestreinteIdl{
	  Matricule matricule;
	  Heure heureD;
	  Minute minuteD;
	  Heure heureF;
	  Minute minuteF;
	  Jour jourD;
	  Mois moisD;
	  Annee anneeD;
	  Jour jourF;
	  Mois moisF;
	  Annee anneeF;
	  string zone;
  } autorisationRestreinteStruct;

  /********** Exceptions *****/

  exception conflitAutorisationException{
	  string message;
  };

  exception autorisationRefuseeException{
	  string message;
	  long long heure;
	  Matricule matricule;
  };

  /********** Méthodes *****/

  /*
   * Ajouter une autorisation pour un employé permanent.
   */
  void ajouterAutorisation(in Cle cleIdl, in autorisationStruct autorisationIdl)
	  raises (conflitAutorisationException, sessionInvalidException, sessionExpireeException);

  /*
   * Ajouter une autorisation pour une employé temporaire.
   */
  void ajouterAutorisationRestreinte(in Cle cleIdl, in autorisationRestreinteStruct autorisationIdl)
	  raises (conflitAutorisationException, sessionInvalidException, sessionExpireeException);

  /*
   * Vérifie s'il existe une autorisation d'accès à une zone pour un employé.
   */
  void autoriser(in Matricule matriculeIdl, in string zoneIdl)
	  raises (autorisationRefuseeException);

};

/******************** COFFREFORT ********************/

interface coffreFort{

  /********** Exceptions *****/

  exception empreinteInconnueException{
	  string message;
  };

  exception matriculeInconnuException{
	  string message;
  };
  exception matriculeErroneException{
	  string message;
  };

  /********** Méthodes *****/


  /*
   * Vérifie si un emloyé a déjà une empreinte.
   */
  void aEmpreinte(in Cle cleIdl, in Matricule matriculeIdl)
	  raises(matriculeInconnuException, sessionInvalidException, sessionExpireeException);

  /*
   * Permet de récupérer le matricule d'un employé à partir de son empreinte.
   */
  Matricule validerEmpreinte(in Cle cleIdl, in Empreinte empreinteIdl)
	  raises (empreinteInconnueException, sessionInvalidException, sessionExpireeException);

  /*
   * Permet d'ajouter ou de modifier l'empreinte d'un employé permanent.
   */
  void modificationEmpreinte(in Cle cleIdl, in Empreinte empreinteIdl, in Matricule matriculeIdl)
    raises (matriculeInconnuException, sessionInvalidException, sessionExpireeException);

  /*
   * Permet d'ajouter l'empreinte d'un employé temporaire.
   */
  void ajouterEmpreinteTemp(in Cle cleIdl, in Empreinte empreinteIdl, in Matricule matriculeIdl)
    raises (sessionInvalidException, sessionExpireeException, matriculeErroneException);

  /*
   * Permet de supprimer l'empreinte d'un employé temporaire.
   */
  void supprimerEmpreinteTemp(in Cle cleIdl, in Matricule matriculeIdl)
    raises (matriculeErroneException, sessionInvalidException, sessionExpireeException, matriculeInconnuException);

};

/******************** JOURNAL ********************/

interface journal{

  /********** Types *****/
	
    /* demandeIdl est composé des informations relatives à une tentative d'accès à une porte.
    * Type repésente l'entrée(0) ou la sortie (1).
    * L'id d'une zone est un caractère, alors que l'id porte est un numéro
    * si la personne qui tente de passer une porte est reconnu, son matricule est enregistré
    * sinon, on enregistre le hash de l'empreinte.
    */
  typedef struct demandeIdl{
    Matricule matricule;
    Empreinte empreinteIdl;
    long long dateHeure;
    string idZone;
    long idPorte;
    string statut;
    long type;
  } demandeStruct;

  typedef sequence<demandeStruct> listeDemande;

  /********** Méthodes *****/

  /*
   * Log d'une acceptation/refus d'accès d'une personne après une identification réussie.
   */
  oneway void loguer(in demandeStruct demandeIdl);

  /*
   * Log d'un échec d'identification.
   */
  oneway void loguerInconnu(in demandeStruct demandeIdl);

  /*
   * Consultation des demandes à partir d'un matricule.
   */
  listeDemande consulterByMatricule(in Matricule matriculeIdl);

 /*
   * Consultation des demandes à partir d'une date.
   */
  listeDemande consulterByDate(in long long date);

};

/******************** ZONEUR ********************/

interface zoneur{

  /********** Types *****/



  /********** Exceptions *****/



  /********** Méthodes *****/

  annuaire resolveAnnuaire();

  coffreFort resolveCoffreFort();

  journal resolveJournal();

  autorisateur resolveAutorisateur();

  autorisateur resolveAutorisateurTemporaire();

  boolean isNotInsideZone(in string matriculeIdl);

  boolean isNotInsideAllZone(in string matriculeIdl);

  void entre(in string matriculeIdl);

  void sort(in string matriculeIdl);

};

};
